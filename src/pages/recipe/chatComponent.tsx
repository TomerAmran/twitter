"use client";
import React, { useState } from "react";
import { useMutation, useQueryClient } from "react-query";
import { ask } from "./chatbot"; // assuming chatbot.ts is in the same directory
import Head from "next/head";
import AudioRecorder from "./recorder";
import { sendRecord } from "./speech-to-text";
const ChatComponent = () => {
  const [message, setMessage] = useState("");
  const queryClient = useQueryClient();
  // const [response, setResponse] = useState("");
  const audioSetter = (url: string) => {
    sendRecord(url).then((message) => {
      const currentChat = queryClient.getQueryData("chat") || [];
      queryClient.setQueryData("chat", [
        ...currentChat,
        { role: "user", content: message },
      ]);
      mutation.mutate(message);
    });
  };
  const mutation = useMutation(ask, {
    onSuccess: (data) => {
      const currentChat = queryClient.getQueryData("chat") || [];
      queryClient.setQueryData("chat", [
        ...currentChat,
        { role: "bot", content: data },
      ]);
    },
  });

  const handleSubmit = (event) => {
    event.preventDefault();

    const currentChat = queryClient.getQueryData("chat") || [];
    queryClient.setQueryData("chat", [
      ...currentChat,
      { role: "user", content: message },
    ]);

    mutation.mutate(message);

    setMessage("");
  };

  return (
    <div>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div className="h-full w-full border-x border-slate-400  md:max-w-2xl">
          <div className="flex flex-col">
            {queryClient.getQueryData("chat")?.map((message, index) => (
              <p key={index}>
                <strong>{message.role}:</strong> {message.content}
              </p>
            ))}
            {mutation.isLoading && <div>loading...</div>}
          </div>
          {/* <form onSubmit={handleSubmit}>
            <input
              className="rounded-md border border-gray-300 text-black"
              type="text"
              value={message}
              onChange={(e) => setMessage(e.target.value)}
            />
            <button type="submit">Send</button>
          </form> */}
          <AudioRecorder audioURLSetter={audioSetter} />
        </div>
      </main>
    </div>
  );
};

export default ChatComponent;
